@page
@model Gasoline_BV_Website.Pages.ShoppingCartModel
@{
    Layout = "Consumer_Layout";
    ViewData["Title"] = "ShoppingCart";
}


<!--!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="~/css/shoping.css">
</head>
<body>

    <div class="container">
        <header>
            <h1>LIST PRODUCT</h1>
            <div class="iconCart">
                <img src="icon.png">
                <div class="totalQuantity">0</div>
            </div>
        </header>

        <div class="listProduct">

        </div>

    </div>

    <div class="cart">
        <h2>
            CART
        </h2>

        <div class="listCart">

           ->



                </div>
            </div>
            }

        </div>

        <div class="buttons">
            <div class="close">
                CLOSE
            </div>
            <div class="checkout">
                <a href="checkout.html">CHECKOUT</a>
            </div>
        </div>
    </div>


    <script src="~/js/script.js"></script>

</body>
</html>-->

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/cart.css">
    <style>
        /* Your CSS styles here */

        /** {
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            margin: 0;
        }

        .cart-container {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
        }

        .product-card {
            width: 300px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin: 10px;
            padding: 10px;
            text-align: center;
        }

        .product-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 5px;
        }

        .product-name {
            margin: 10px 0;
            font-weight: bold;
        }

        .product-details {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

            .product-details label {
                font-weight: bold;
            }

        .add-to-cart-btn {
            display: inline-block;
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 10px;
            cursor: pointer;
        }*/

        * {
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            margin: 0;
        }

        .cart-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }

        .product-card {
            width: 300px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin: 10px;
            padding: 10px;
            text-align: center;
        }

        .product-image {
            width: 100%;
            height: 150px; /* Adjust the height as needed */
            object-fit: contain; /* or change to 'cover' as needed */
            border-radius: 5px;
        }

        .product-name {
            margin: 10px 0;
            font-weight: bold;
        }

        .product-details {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

            .product-details label {
                font-weight: bold;
            }

        .add-to-cart-btn {
            display: inline-block;
            background-color: #4CAF50;
            color: white;
            padding: 8px 15px;
            text-align: center;
            text-decoration: none;
            border-radius: 5px;
            margin-top: 10px;
            cursor: pointer;
        }

        .cart-items-container {
            margin-top: 20px;
        }

            .cart-items-container h2 {
                text-align: center;
            }

        #cart-items-list {
            list-style-type: none;
            padding: 0;
        }

        .product-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 10px;
        }

            .product-info .product-image {
                width: 100px;
                height: 100px;
                object-fit: cover;
                border-radius: 5px;
                margin-right: 10px;
            }

        .product-details {
            display: flex;
            flex-direction: column;
        }

        .product-actions button {
            padding: 8px 15px;
            margin-left: 5px;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            background-color: #4CAF50;
            color: white;
        }

        #total-amount {
            font-weight: bold;
        }

        .submit-button {
            display: block;
            width: 100%;
            max-width: 200px;
            margin: 20px auto;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

    </style>
</head>

<body>
    <div class="cart-container">
        @foreach (var product in Model.products)
        {
            var base64Image = Convert.ToBase64String(product.ImagePath);

            <div class="product-card">
                <img class="product-image" src="data:images/png;base64,@Convert.ToBase64String(product.ImagePath)" alt="Product Image">


                <div class="product-name">@product.ProductName</div>
                <div class="product-details">
                    <label>Quantity:</label>
                    @*<span>@product.Quantity</span>*@
                </div>
                <div class="product-details">
                    <label>Price:</label>
                    <span>$@product.Price</span>
                </div>

                <!-- other product details -->
                <a href="#" class="add-to-cart-btn" data-product-id="@product.ID" data-product-name="@product.ProductName" data-product-quantity="@product.Quantity" data-product-price="@product.Price" data-product-image="@base64Image">


                    Add to Cart
                </a>
            </div>
        }
    </div>

    <div class="cart-items-container">
        <h2>Cart Item</h2>
        <ul id="cart-items-list"></ul>

        <p>Total Amount: <span id="total-amount">$0</span></p>

        <div class="buttons">
            <button class="submit-button" onclick="submitCart()">Submit</button>
        </div>

    </div>
   
    <script>
         var productList = @Html.Raw(Json.Serialize(Model.products));
        var cartItems = [];

        function renderCartItems() {
            var cartItemsList = document.getElementById('cart-items-list');
            cartItemsList.innerHTML = '';

            cartItems.forEach(function (item) {
                var cartItem = document.createElement('li');
                cartItem.innerHTML = `
                    <div class="product-info">
        <img class="product-image" src="data:image/png;base64,${item.Image}" alt="Product Image">
                        <div class="product-details">
                            <div class="product-name">${item.ProductName}</div>
                            <div class="product-quantity">Quantity: ${item.Quantity}</div>
                            <div class="product-price">Price: $${item.Price}</div>
                        </div>
                        <div class="product-actions">
                            <button onclick="subtractItem('${item.ID}')">-</button>
                            <button onclick="addItem('${item.ID}')">+</button>
                            <button onclick="removeItem('${item.ID}')">Remove</button>
                        </div>
                    </div>
                `;
    cartItemsList.appendChild(cartItem);
            });

            updateTotalAmount();
        }

        function updateTotalAmount() {
            var totalAmount = 0;
            cartItems.forEach(function (item) {
                totalAmount += item.Quantity * item.Price;
            });

            document.getElementById('total-amount').innerText = `$${totalAmount}`;
        }

        function findCartItemIndexById(id) {
            return cartItems.findIndex(function (item) {
                return item.ID === id;
            });
        }

        //function addItem(id) {
        //    var index = findCartItemIndexById(id);
        //    if (index !== -1) {
        //        cartItems[index].Quantity++;
        //    }
        //    renderCartItems();
        //}

        //function subtractItem(id) {
        //    var index = findCartItemIndexById(id);
        //    if (index !== -1 && cartItems[index].Quantity > 0) {
        //        cartItems[index].Quantity--;
        //    }
        //    renderCartItems();
        //}
        function addItem(id) {
            var index = findCartItemIndexById(id);
            if (index !== -1) {
                cartItems[index].Quantity += 1;
            }
            renderCartItems();
        }

        function subtractItem(id) {
            var index = findCartItemIndexById(id);
            if (index !== -1 && cartItems[index].Quantity > 0) {
                cartItems[index].Quantity -= 1;
            }
            renderCartItems();
        }


        function removeItem(id) {
            var index = findCartItemIndexById(id);
            if (index !== -1) {
                cartItems.splice(index, 1);
            }
            renderCartItems();
        }

        function addToCart(productId, productName, productQuantity, productPrice, productImage) {
            var existingItem = cartItems.find(function (item) {
                return item.ID === productId;
            });

            if (existingItem) {
                existingItem.Quantity++;
            } else {
                cartItems.push({
                    ID: productId,
                    ProductName: productName,
                    Quantity: productQuantity,
                    Price: productPrice,
                    Image: productImage
                });
            }

            renderCartItems();
        }

        document.addEventListener('DOMContentLoaded', function () {
            var addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
            addToCartButtons.forEach(function (button) {
                button.addEventListener('click', function (event) {
                    event.preventDefault();
                    var productId = button.getAttribute('data-product-id');
                    var productName = button.getAttribute('data-product-name');
                    var productQuantity = parseInt(button.getAttribute('data-product-quantity'));
                    var productPrice = parseFloat(button.getAttribute('data-product-price'));
                    var productImage = button.getAttribute('data-product-image');
                    addToCart(productId, productName, productQuantity, productPrice, productImage);
                });
            });
        });
    </script>
</body>

</html>